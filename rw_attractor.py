
from mpl_toolkits.mplot3d import axes3d, Axes3D
from scipy import integrate
from matplotlib.colors import cnames
from matplotlib import animation
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint as ODEint
import random

def attractor(Positions, folder=''):
	# initialisation function: plot the background of each frame
	def init():
		for line, pt in zip(lines, pts):
			line.set_data([], [])
			line.set_3d_properties([])
			pt.set_data([], [])
			pt.set_3d_properties([])
		return lines + pts

	M = 3 # x, y, z
	N_trajectories = 1	# number of (particle) trajectories
	N = len(Positions)  # number of points (x,t)

	x_t = np.zeros((N_trajectories, N, M))
	for i in range(N):
		x_t[0][i] = [Positions[i][0], Positions[i][1], 0] 

	print ('(N_trajectories, N, M) = ', x_t.shape)

	# Set up figure & 3D axis for animation
	fig = plt.figure()
	ax = fig.add_axes([0, 0, 1, 1], projection='3d')
	#- ax.axis('off')

	# choose a different color for each trajectory
	colors = plt.cm.jet(np.linspace(0, 1, N_trajectories))

	# set up lines and points
	lines = sum([ax.plot([], [], [], '-', c=c) for c in colors], [])
	pts = sum([ax.plot([], [], [], 'o', c=c) for c in colors], [])

	# prepare the axes limits
	ax.set_xlim((0, 45))
	ax.set_ylim((0, 45))
	ax.set_zlim((0, .1))

	ax.set_xlabel(r'$x$')
	ax.set_ylabel(r'$y$')
	ax.set_zlabel(r'$z$')

	# set point-of-view: specified by (altitude degrees, azimuth degrees)
	ax.view_init(40, 30)

	# animation function.  This will be called sequentially with the frame number
	def animate(i):
		# we'll step two time-steps per frame.  This leads to nice results.
		i = (2 * i) % x_t.shape[1]
		for line, pt, xi in zip(lines, pts, x_t):
			x, y, z = xi[:i].T
			line.set_data(x, y)
			line.set_3d_properties(z)
			pt.set_data(x[-1:], y[-1:])
			pt.set_3d_properties(z[-1:])

		ax.view_init(30, 0.3 * i)
		fig.canvas.draw()
		return lines + pts
	# instantiate the animator.
	anim = animation.FuncAnimation(fig, animate, init_func=init, frames=500, interval=30, blit=True)
	# Save as mp4. This requires mplayer or ffmpeg to be installed
	anim.save('video_attractor.mp4', fps=15, extra_args=['-vcodec', 'libx264'])
	plt.title('Enactions Attractor')
	plt.savefig(folder + 'Attractor.eps', format='eps', dpi=1000)
	print ('Attractor: done.')

if __name__ == '__main__':

	Positions = np.array([[220, 220], [220, 225], [220, 230], [220, 235], [220, 240], 
					[220, 245], [220, 250], [220, 255], [220, 260], [220, 265],
					[220, 270], [220, 275], [220, 280], [220, 285], [220, 290],
					[220, 295], [220, 300], [220, 305], [220, 310], [220, 315], 
					[220, 320], [220, 325], [220, 330], [220, 335], [220, 340], 
					[220, 345], [220, 350], [220, 355], [220, 360], [220, 365], 
					[220, 370], [220, 375], [220, 380], [220, 385], [220, 390], 
					[220, 390], [220, 390], [220, 390], [215, 390], [205, 390], 
					[195, 390], [185, 390], [175, 390], [165, 390], [155, 390], 
					[145, 390], [135, 390], [125, 390], [115, 390], [105, 390], 
					[95, 390], [85, 390], [75, 390], [65, 390], [55, 390], 
					[45, 390], [35, 390], [25, 390], [15, 390], [10, 390], [10, 390], 
					[15, 390], [25, 390], [45, 390], [65, 390], [85, 390], [105, 390], 
					[125, 390], [145, 390], [165, 390], [185, 390], [205, 390], [225, 390], 
					[245, 390], [265, 390], [285, 390], [305, 390], [325, 390], [345, 390], 
					[365, 390], [385, 390], [390, 390], [390, 390], [390, 385], [390, 375], 
					[390, 365], [390, 325], [390, 285], [390, 245], [390, 205], [390, 165], [390, 125], [390, 85], [390, 45], [390, 10], [390, 10], [390, 10], [390, 25], [390, 45], [390, 85], [390, 125], [390, 165], [390, 205], [390, 245], [390, 285], [390, 325], [390, 365], [390, 390], [390, 390], [390, 390], [390, 390], [390, 390], [390, 390], [390, 390], [355, 390], [315, 390], [235, 390], [155, 390], [75, 390], [10, 390], [10, 390], [10, 390], [45, 390], [85, 390], [165, 390], [245, 390], [325, 390], [390, 390], [390, 390], [390, 390], [390, 390], [385, 390], [375, 390], [335, 390], [255, 390], [175, 390], [95, 390], [15, 390], [10, 390], [10, 355], [10, 315], [10, 275], [10, 115], [10, 10], [10, 10], [10, 10], [10, 25], [10, 45], [10, 85], [10, 125], [10, 285], [10, 390], [10, 390], [10, 390], [10, 390], [10, 390], [10, 390], [10, 390], [10, 390], [10, 390], [10, 390], [25, 390], [65, 390], [225, 390], [385, 390], [390, 390], [390, 385], [390, 375], [390, 335], [390, 295], [390, 135], [390, 10], [390, 10], [390, 10], [390, 10], [390, 10], [390, 10], [390, 10], [390, 15], [390, 25], [390, 65], [390, 105], [390, 265], [390, 305], [390, 345], [390, 390], [390, 390], [390, 390], [390, 390], [385, 390], [335, 390], [255, 390], [95, 390], [10, 390], [10, 390], [10, 390], [25, 390], [225, 390], [265, 390], [305, 390], [390, 390], [390, 390], [390, 390], [335, 390], [255, 390], [95, 390], [55, 390], [15, 390], [10, 390], [10, 390], [10, 390], [10, 335], [10, 135], [10, 95], [10, 55], [10, 15], [10, 10], [10, 10], [10, 10], [10, 65], [10, 305], [10, 310], [10, 320], [10, 390], [10, 390], [10, 390], [225, 390], [265, 390], [390, 390], [390, 390], [390, 390], [390, 390], [95, 390], [55, 390], [10, 390], [10, 390], [10, 390], [10, 95], [10, 55], [10, 10], [10, 10], [10, 10], [10, 305], [10, 345], [10, 390], [10, 390], [10, 350], [10, 350], [10, 350], [305, 350], [345, 350], [390, 350], [390, 350], [390, 135], [390, 95], [390, 15], [390, 10], [390, 10], [390, 10], [390, 305], [390, 345], [390, 390], [390, 390], [95, 390], [55, 390], [10, 390], [10, 390], [305, 390], [345, 390], [350, 390], [360, 390], [390, 390], [390, 390], [390, 390], [390, 135], [390, 95], [390, 80], [390, 60], [390, 10], [390, 10], [390, 10], [390, 345], [390, 380], [390, 390], [95, 390], [55, 390], [10, 390], [10, 390], [10, 390], [305, 390], [345, 390], [380, 390], [390, 390], [390, 390], [390, 135], [390, 95], [390, 60], [390, 45], [390, 35], [390, 10], [390, 10], [390, 10], [390, 345], [390, 380], [95, 390], [55, 390], [20, 390], [10, 390], [380, 390], [390, 390], [390, 135], [390, 95], [390, 60], [390, 45], [390, 35], [390, 25], [390, 25], [390, 10], [390, 10], [390, 380], [390, 390], [95, 390], [55, 390], [20, 390], [10, 390], [10, 390], [380, 390], [390, 135], [390, 95], [390, 60], [390, 55], [390, 45], [390, 35], [390, 25], [390, 10], [390, 10], [390, 10], [390, 10], [390, 10], [390, 10], [390, 10], [390, 10], [390, 25], [390, 45], [390, 55], [390, 70], [390, 90], [390, 100], [390, 115], [390, 135], [390, 145], [390, 160], [390, 180], [390, 190], [390, 205], [390, 225], [390, 250], [390, 270], [390, 295], [390, 315], [390, 340], [390, 360], [390, 385], [390, 390], [390, 390], [390, 20], [95, 10], [60, 10], [35, 10], [10, 10], [10, 10], [10, 305], [10, 340], [10, 365], [10, 385], [10, 385], [305, 385], [340, 385], [365, 385], [385, 385], [385, 385], [385, 90], [385, 55], [385, 30], [385, 10], [90, 10], [55, 10], [30, 10], [10, 305], [10, 340], [10, 365], [305, 385], [340, 385], [365, 385], [385, 90], [385, 55], [385, 30], [90, 10], [55, 10], [30, 10], [10, 305], [10, 340], [10, 365], [305, 385], [340, 385], [365, 385], [385, 90], [385, 55], [385, 30], [90, 10], [55, 10], [10, 305], [10, 340], [305, 385], [340, 385], [385, 90], [385, 55], [90, 10], [55, 10], [10, 305], [10, 340], [305, 385], [340, 385], [385, 90], [385, 55], [175, 10], [175, 10], [175, 10], [175, 305], [175, 340], [175, 390], [175, 390], [175, 390], [385, 390], [385, 390], [385, 390], [385, 95], [385, 60], [385, 10], [385, 10], [385, 305], [385, 345], [385, 380], [385, 390], [385, 390], [370, 390], [350, 390], [300, 390], [300, 390], [285, 390], [265, 390], [215, 390], [215, 390], [200, 390], [180, 390], [130, 390], [130, 390], [115, 390], [95, 390], [45, 390], [45, 390], [30, 390], [10, 390], [10, 390], [10, 390], [10, 95], [10, 55], [10, 20], [10, 10], [10, 305], [10, 345], [10, 380], [10, 390], [10, 95], [10, 55], [10, 20], [10, 10], [10, 305], [10, 345], [10, 380], [10, 390], [10, 145], [10, 145], [215, 145], [215, 145], [215, 145], [214, 10], [214, 10], [214, 10], [389, 390], [389, 390], [389, 390], [389, 95], [389, 60], [389, 10], [389, 305], [389, 345], [389, 380], [389, 390], [389, 390]])

	# reduce
	Positions = np.array([[_[0]/10., _[1]/10.] for _ in Positions])

	#plt.plot(Positions[:, 0], Positions[:, 1], 'g.')
	#plt.show()

	attractor(Positions)

